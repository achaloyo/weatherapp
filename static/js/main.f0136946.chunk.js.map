{"version":3,"sources":["keys.js","components/home.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","API_KEY","BASE_URL","apiData","key","keys","base","Home","udpate","e","myAction","type","value","target","props","dispatch","handleChange","fetch","cityName","then","res","json","result","myweaAction","dateBuild","d","date","String","window","Date","slice","mystate","this","className","id","onChange","onKeyPress","weather","main","name","sys","country","Math","round","temp","React","Component","connect","state","App","description","weatherDescription","includes","Boolean","location","hostname","match","initState","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f0136946.chunk.js","sourcesContent":["module.exports = {\n    API_KEY: \"ef9a0e7d87b876c0865cc4dcf843ea3c\",\n    BASE_URL: \"https://api.openweathermap.org/data/2.5/\",\n  };","import React from \"react\";\nimport keys from \"../keys\";\nimport { connect } from \"react-redux\";\nimport \"../App.css\";\n\nconst apiData = {\n  key: keys.API_KEY,\n  base: keys.BASE_URL,\n};\n\nclass Home extends React.Component {\n  udpate = (e) => {\n    const myAction = { type: \"updatedCityName\", value: e.target.value };\n    this.props.dispatch(myAction);\n  };\n\n  handleChange = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(\n        `${apiData.base}weather?q=${this.props.cityName}&APPID=${apiData.key}`\n      )\n        .then((res) => res.json())\n        .then((result) => {\n          const myweaAction = { type: \"updatedWeather\", value: result };\n          this.props.dispatch(myweaAction);\n        });\n    }\n  };\n\n  dateBuild = (d) => {\n    let date = String(new window.Date());\n    date = date.slice(3, 15);\n    return date;\n  };\n\n  render() {\n    let mystate = this.props;\n    return (\n      <div>\n        <main>\n          <div className=\"search-container\">\n            <input\n              className=\"search-bar\"\n              id=\"inp\"\n              type=\"text\"\n              onChange={this.udpate}\n              onKeyPress={this.handleChange}\n            />\n          </div>\n\n          {typeof mystate.weather.main !== \"undefined\" ? (\n            <div>\n              <div className=\"location-container\">\n                <div className=\"location\">\n                  {mystate.weather.name}, {mystate.weather.sys.country}\n                </div>\n                <div className=\"date\"> {this.dateBuild(new Date())}</div>\n              </div>\n              <div className=\"weather-container\">\n                <div className=\"temperature\">\n                  {Math.round(mystate.weather.main.temp - 273.15)}Â°C\n                </div>\n                <div className=\"weather\">{mystate.weather.weather[0].main}</div>\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    cityName: state.cityName,\n    weather: state.weather,\n  };\n};\n\nexport default connect(mapStateToProps)(Home);\n","import React from \"react\";\nimport Home from \"./components/home\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  render() {\n    let weather = this.props.weather;\n    if (weather !== \"undefined\" && weather != \"\") {\n      if (weather.weather !== \"undefined\" && weather.weather != \"\") {\n        if (\n          weather.weather[0].description !== \"undefined\" &&\n          weather.weather[0].description != \"\"\n        ) {\n          const weatherDescription = weather.weather[0].description;\n          const keyWords1 = [\n            \"cloudy\",\n            \"clouds\",\n            \"cloud\",\n            \"overcast\",\n            \"overcast clouds\",\n            \"scattered clouds\",\n            \"broken clouds\",\n          ];\n          const keyWords2 = [\"haze\", \"fog\", \"mist\"];\n          const keyWords3 = [\"sunny\", \"clear sky\"];\n          const keyWords4 = [\n            \"rain\",\n            \"shower rain\",\n            \"dark clouds\",\n            \"moderate rain\",\n            \"light rain\",\n          ];\n          if (keyWords1.includes(weatherDescription)) {\n            return (\n              <div className=\"App-cloud\">\n                <div className=\"header\">\n                  <h2>Weatherweb</h2>\n                </div>\n                <Home />\n              </div>\n            );\n          } else if (keyWords2.includes(weatherDescription)) {\n            return (\n              <div className=\"App-haze\">\n                <div className=\"header\">\n                  <h2>Weatherweb</h2>\n                </div>\n                <Home />\n              </div>\n            );\n          } else if (keyWords3.includes(weatherDescription)) {\n            return (\n              <div className=\"App-hot\">\n                <div className=\"header\">\n                  <h2>Weatherweb</h2>\n                </div>\n                <Home />\n              </div>\n            );\n          } else if (keyWords4.includes(weatherDescription)) {\n            return (\n              <div className=\"App-rain\">\n                <div className=\"header\">\n                  <h2>Weatherweb</h2>\n                </div>\n                <Home />\n              </div>\n            );\n          }\n        }\n      }\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h2>Weatherweb</h2>\n        </div>\n        <Home />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    cityName: state.cityName,\n    weather: state.weather,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n  cityName: \"\",\n  weather: [],\n};\n\nconst rootReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"updatedCityName\":\n      return {\n        ...state,\n        cityName: action.value,\n      };\n    case \"updatedWeather\":\n      return {\n        ...state,\n        weather: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}